package eu.maveniverse.domtrip.snippets;

import eu.maveniverse.domtrip.Comment;
import eu.maveniverse.domtrip.Document;
import eu.maveniverse.domtrip.DomTripConfig;
import eu.maveniverse.domtrip.Editor;
import eu.maveniverse.domtrip.Element;
import eu.maveniverse.domtrip.Node;
import eu.maveniverse.domtrip.ProcessingInstruction;
import eu.maveniverse.domtrip.QName;
import eu.maveniverse.domtrip.Serializer;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * Snippet tests for the Document API documentation.
 */
public class DocumentSnippets extends BaseSnippetTest {

    @Test
    public void demonstrateDocumentCreation() {
        // START: document-creation
        // Create empty document
        Document doc = Document.of();

        // Parse from XML string
        String xmlString = "<root><child>value</child></root>";
        Document doc2 = Document.of(xmlString);

        // Create with root element
        Document doc3 = Document.withRootElement("project");

        // Create with XML declaration
        Document doc4 = Document.withXmlDeclaration("1.0", "UTF-8");
        // END: document-creation

        Assertions.assertNotNull(doc);
        Assertions.assertEquals("root", doc2.root().name());
        Assertions.assertEquals("project", doc3.root().name());
        Assertions.assertNotNull(doc4);
    }

    @Test
    public void demonstrateFluentAPI() {
        // START: fluent-api
        // Build document using fluent API
        Document doc = Document.withXmlDeclaration("1.1", "UTF-8");
        doc.root(Element.of("project"));
        // END: fluent-api

        Assertions.assertEquals("project", doc.root().name());
    }

    @Test
    public void demonstrateXmlDeclaration() {
        // START: xml-declaration
        Document doc = Document.of();

        // Set XML declaration components
        doc.version("1.0");
        doc.encoding("UTF-8");

        // Generate XML declaration
        doc.withXmlDeclaration();

        // Access declaration
        String xmlDecl = doc.xmlDeclaration();
        // END: xml-declaration

        Assertions.assertTrue(xmlDecl.contains("version=\"1.0\""));
        Assertions.assertTrue(xmlDecl.contains("encoding=\"UTF-8\""));
    }

    @Test
    public void demonstrateEncodingManagement() {
        // START: encoding-management
        Document doc = Document.withXmlDeclaration("1.0", "UTF-16");

        // Set document encoding
        doc.encoding("UTF-16");
        String encoding = doc.encoding(); // "UTF-16"

        // Encoding affects serialization
        String xml = doc.toXml();
        // Output will use UTF-16 encoding
        // END: encoding-management

        Assertions.assertEquals("UTF-16", encoding);
        Assertions.assertTrue(xml.contains("UTF-16"));
    }

    @Test
    public void demonstrateVersionControl() {
        // START: version-control
        Document doc = Document.withXmlDeclaration("1.1", "UTF-8");

        // Set XML version
        doc.version("1.1");
        String version = doc.version(); // "1.1"

        // Version 1.1 allows additional characters in names
        // END: version-control

        Assertions.assertEquals("1.1", version);
    }

    @Test
    public void demonstrateRootElementManagement() {
        // START: root-element-management
        Document doc = Document.of();

        // Create and set root element
        Element root = Element.of("project");
        doc.root(root);

        // Access root element
        Element rootElement = doc.root();
        // END: root-element-management

        Assertions.assertEquals("project", rootElement.name());
    }

    @Test
    public void demonstrateRootElementWithNamespaces() {
        // START: root-element-namespaces
        Document doc = Document.of();

        // Create root with namespace
        QName rootName = QName.of("http://maven.apache.org/POM/4.0.0", "project");
        Element root = Element.of(rootName);
        doc.root(root);

        // Namespace declarations are preserved
        // END: root-element-namespaces

        Assertions.assertEquals("project", doc.root().name());
        Assertions.assertEquals("http://maven.apache.org/POM/4.0.0", doc.root().namespaceURI());
    }

    @Test
    public void demonstrateAddingTopLevelNodes() {
        // START: adding-top-level-nodes
        Document doc = Document.withRootElement("html");

        // Add processing instruction before root
        ProcessingInstruction stylesheet =
                ProcessingInstruction.of("xml-stylesheet", "type=\"text/xsl\" href=\"style.xsl\"");
        doc.addNode(stylesheet);

        // Add comment after root
        Comment footer = Comment.of("Generated by DomTrip");
        doc.addNode(footer);
        // END: adding-top-level-nodes

        String xml = doc.toXml();
        Assertions.assertTrue(xml.contains("xml-stylesheet"));
        Assertions.assertTrue(xml.contains("Generated by DomTrip"));
    }

    @Test
    public void demonstrateDocumentTraversal() {
        // START: document-traversal
        String xml =
                """
            <?xml version="1.0"?>
            <!-- Comment 1 -->
            <root>
                <child>value</child>
            </root>
            <!-- Comment 2 -->
            """;
        Document doc = Document.of(xml);

        // Access all document nodes
        Stream<Node> allNodes = doc.nodes();

        // Find specific node types
        List<Comment> comments = doc.nodes()
                .filter(node -> node instanceof Comment)
                .map(node -> (Comment) node)
                .collect(Collectors.toList());

        // Find processing instructions
        List<ProcessingInstruction> pis = doc.nodes()
                .filter(node -> node instanceof ProcessingInstruction)
                .map(node -> (ProcessingInstruction) node)
                .collect(Collectors.toList());
        // END: document-traversal

        Assertions.assertTrue(allNodes.count() > 0);
        Assertions.assertTrue(comments.size() >= 2);
    }

    @Test
    public void demonstrateDoctypeSupport() {
        // START: doctype-support
        Document doc = Document.of();

        // Set DOCTYPE declaration
        doc.doctype("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" "
                + "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");

        // Access DOCTYPE
        String doctype = doc.doctype();
        // END: doctype-support

        Assertions.assertTrue(doctype.contains("DOCTYPE html"));
    }

    @Test
    public void demonstrateDoctypePreservation() {
        // START: doctype-preservation
        String xmlWithDoctype =
                """
            <?xml version="1.0"?>
            <!DOCTYPE root SYSTEM "example.dtd">
            <root>
                <element>content</element>
            </root>
            """;

        Document doc = Document.of(xmlWithDoctype);
        // DOCTYPE is preserved exactly as written
        String preserved = doc.doctype();
        // END: doctype-preservation

        Assertions.assertTrue(preserved.contains("example.dtd"));
    }

    @Test
    public void demonstrateNodeCounting() {
        // START: node-counting
        String complexXml =
                """
            <?xml version="1.0"?>
            <!-- Comment -->
            <root>
                <child1>value1</child1>
                <child2>value2</child2>
            </root>
            """;
        Document doc = Document.of(complexXml);

        // Count total nodes
        int totalNodes = (int) doc.nodes().count();

        // Count specific node types
        long elementCount = doc.nodes().filter(node -> node instanceof Element).count();

        long commentCount = doc.nodes().filter(node -> node instanceof Comment).count();
        // END: node-counting

        Assertions.assertTrue(totalNodes > 0);
        Assertions.assertTrue(elementCount > 0);
        Assertions.assertTrue(commentCount > 0);
    }

    @Test
    public void demonstrateBasicSerialization() {
        // START: basic-serialization
        Document doc = Document.withRootElement("root");

        // Serialize with default settings
        String xml = doc.toXml();
        // END: basic-serialization

        Assertions.assertTrue(xml.contains("<root"));
    }

    @Test
    public void demonstrateCustomSerialization() {
        // START: custom-serialization
        Document doc = Document.withRootElement("root");

        // Serialize with custom configuration using Serializer
        DomTripConfig config =
                DomTripConfig.prettyPrint().withIndentString("  ").withLineEnding("\n");

        Serializer serializer = new Serializer(config);
        String xml = serializer.serialize(doc);
        // END: custom-serialization

        Assertions.assertTrue(xml.contains("<root"));
    }

    @Test
    public void demonstrateDocumentCloning() {
        // START: document-cloning
        String xmlString = "<root><child>value</child></root>";
        Document original = Document.of(xmlString);

        // Create a copy (deep clone)
        Document copy = Document.of(original.toXml());

        // Modifications to copy don't affect original
        // END: document-cloning

        Assertions.assertEquals(original.root().name(), copy.root().name());
    }

    @Test
    public void demonstrateDocumentValidation() {
        // START: document-validation
        Document doc = Document.withRootElement("root");

        // Check if document is valid
        boolean hasRoot = doc.root() != null;
        boolean hasValidStructure = doc.nodes().count() > 0;

        // Validate XML declaration
        boolean hasXmlDecl = !doc.xmlDeclaration().isEmpty();
        // END: document-validation

        Assertions.assertTrue(hasRoot);
        Assertions.assertTrue(hasValidStructure);
    }

    @Test
    public void demonstrateEditorIntegration() {
        // START: editor-integration
        // Create document and edit
        Document doc = Document.withRootElement("config");
        Editor editor = new Editor(doc);

        // Editor operations modify the document
        editor.addElement(editor.root(), "setting", "value");

        // Document reflects changes
        Element setting = doc.root().child("setting").orElse(null);
        // END: editor-integration

        Assertions.assertNotNull(setting);
        Assertions.assertEquals("value", setting.textContent());
    }

    @Test
    public void demonstrateErrorHandling() {
        // START: document-error-handling
        try {
            String xmlString = "<root><child>value</child></root>";
            Document doc = Document.of(xmlString);

            // Validate document structure
            if (doc.root() == null) {
                throw new IllegalStateException("Document has no root element");
            }

        } catch (Exception e) {
            // Handle parsing errors
            System.err.println("Failed to parse document: " + e.getMessage());
        }
        // END: document-error-handling

        // Test passes if no exception is thrown
        Assertions.assertTrue(true);
    }
}
